
// Generated from SIG.g4 by ANTLR 4.11.1


#include "SIGLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct SIGLexerStaticData final {
  SIGLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SIGLexerStaticData(const SIGLexerStaticData&) = delete;
  SIGLexerStaticData(SIGLexerStaticData&&) = delete;
  SIGLexerStaticData& operator=(const SIGLexerStaticData&) = delete;
  SIGLexerStaticData& operator=(SIGLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag siglexerLexerOnceFlag;
SIGLexerStaticData *siglexerLexerStaticData = nullptr;

void siglexerLexerInitialize() {
  assert(siglexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<SIGLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
      "T__33", "OR", "AND", "EQ", "NEQ", "GT", "LT", "GTEQ", "LTEQ", "PLUS", 
      "MINUS", "DIV", "MOD", "POW", "NOT", "SCOL", "ASSIGN", "OPAR", "CPAR", 
      "OBRACE", "CBRACE", "OSBRACE", "CSBRACE", "TRUE", "FALSE", "LOG", 
      "LAYOUT", "STRUCT", "COMPUTE_PSO", "GRAPHICS_PSO", "RAYTRACE_PSO", 
      "RAYTRACE_RAYGEN", "RAYTRACE_PASS", "SLOT", "RT", "RTV", "DSV", "ROOTSIG", 
      "ID", "INT_SCALAR", "FLOAT_SCALAR", "STRING", "COMMENT", "SPACE", 
      "POINTER", "INSERT_START", "INSERT_END", "INSERT_BLOCK"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'::'", "','", "'Sampler'", "'define'", "'rtv'", "'blend'", "':'", 
      "'compute'", "'vertex'", "'pixel'", "'domain'", "'hull'", "'geometry'", 
      "'miss'", "'closest_hit'", "'raygen'", "'amplification'", "'mesh'", 
      "'ds'", "'cull'", "'depth_func'", "'depth_write'", "'conservative'", 
      "'enable_depth'", "'topology'", "'enable_stencil'", "'stencil_func'", 
      "'stencil_pass_op'", "'stencil_read_mask'", "'stencil_write_mask'", 
      "'recursion_depth'", "'payload'", "'per_material'", "'local'", "'||'", 
      "'&&'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'+'", "'-'", 
      "'/'", "'%'", "'^'", "'!'", "';'", "'='", "'('", "')'", "'{'", "'}'", 
      "'['", "']'", "'true'", "'false'", "'log'", "'layout'", "'struct'", 
      "'ComputePSO'", "'GraphicsPSO'", "'RaytracePSO'", "'RaytraceRaygen'", 
      "'RaytracePass'", "'slot'", "'rt'", "'RTV'", "'DSV'", "'root'", "", 
      "", "", "", "", "", "'*'", "'%{'", "'}%'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "OR", "AND", "EQ", "NEQ", "GT", "LT", "GTEQ", "LTEQ", "PLUS", 
      "MINUS", "DIV", "MOD", "POW", "NOT", "SCOL", "ASSIGN", "OPAR", "CPAR", 
      "OBRACE", "CBRACE", "OSBRACE", "CSBRACE", "TRUE", "FALSE", "LOG", 
      "LAYOUT", "STRUCT", "COMPUTE_PSO", "GRAPHICS_PSO", "RAYTRACE_PSO", 
      "RAYTRACE_RAYGEN", "RAYTRACE_PASS", "SLOT", "RT", "RTV", "DSV", "ROOTSIG", 
      "ID", "INT_SCALAR", "FLOAT_SCALAR", "STRING", "COMMENT", "SPACE", 
      "POINTER", "INSERT_START", "INSERT_END", "INSERT_BLOCK"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,81,706,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,
  	2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,
  	1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
  	8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,
  	10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
  	12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
  	14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,
  	16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,
  	17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,
  	20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
  	21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
  	22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,
  	25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,
  	26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,
  	27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
  	28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
  	28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
  	29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,
  	30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,
  	31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
  	32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,
  	35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,
  	40,1,41,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,
  	47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,
  	54,1,54,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,
  	57,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,
  	60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
  	61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
  	63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,
  	64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,65,1,
  	65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,
  	66,1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,
  	70,1,70,1,70,1,70,1,70,1,71,1,71,5,71,636,8,71,10,71,12,71,639,9,71,1,
  	72,4,72,642,8,72,11,72,12,72,643,1,73,4,73,647,8,73,11,73,12,73,648,1,
  	73,1,73,5,73,653,8,73,10,73,12,73,656,9,73,1,73,1,73,4,73,660,8,73,11,
  	73,12,73,661,3,73,664,8,73,1,74,1,74,1,74,1,74,5,74,670,8,74,10,74,12,
  	74,673,9,74,1,74,1,74,1,75,1,75,5,75,679,8,75,10,75,12,75,682,9,75,1,
  	75,1,75,1,76,1,76,1,76,1,76,1,77,1,77,1,78,1,78,1,78,1,79,1,79,1,79,1,
  	80,1,80,5,80,700,8,80,10,80,12,80,703,9,80,1,80,1,80,1,701,0,81,1,1,3,
  	2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
  	31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
  	27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,
  	77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,
  	50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,
  	60,121,61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,139,
  	70,141,71,143,72,145,73,147,74,149,75,151,76,153,77,155,78,157,79,159,
  	80,161,81,1,0,6,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,
  	0,48,57,3,0,10,10,13,13,34,34,2,0,10,10,13,13,3,0,9,10,13,13,32,32,715,
  	0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
  	0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
  	0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
  	1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
  	0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
  	0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
  	1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
  	0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,
  	0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,
  	1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,
  	1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,
  	1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,
  	1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,
  	1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,
  	1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,
  	1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,1,163,1,0,0,0,3,166,1,0,0,0,5,168,
  	1,0,0,0,7,176,1,0,0,0,9,183,1,0,0,0,11,187,1,0,0,0,13,193,1,0,0,0,15,
  	195,1,0,0,0,17,203,1,0,0,0,19,210,1,0,0,0,21,216,1,0,0,0,23,223,1,0,0,
  	0,25,228,1,0,0,0,27,237,1,0,0,0,29,242,1,0,0,0,31,254,1,0,0,0,33,261,
  	1,0,0,0,35,275,1,0,0,0,37,280,1,0,0,0,39,283,1,0,0,0,41,288,1,0,0,0,43,
  	299,1,0,0,0,45,311,1,0,0,0,47,324,1,0,0,0,49,337,1,0,0,0,51,346,1,0,0,
  	0,53,361,1,0,0,0,55,374,1,0,0,0,57,390,1,0,0,0,59,408,1,0,0,0,61,427,
  	1,0,0,0,63,443,1,0,0,0,65,451,1,0,0,0,67,464,1,0,0,0,69,470,1,0,0,0,71,
  	473,1,0,0,0,73,476,1,0,0,0,75,479,1,0,0,0,77,482,1,0,0,0,79,484,1,0,0,
  	0,81,486,1,0,0,0,83,489,1,0,0,0,85,492,1,0,0,0,87,494,1,0,0,0,89,496,
  	1,0,0,0,91,498,1,0,0,0,93,500,1,0,0,0,95,502,1,0,0,0,97,504,1,0,0,0,99,
  	506,1,0,0,0,101,508,1,0,0,0,103,510,1,0,0,0,105,512,1,0,0,0,107,514,1,
  	0,0,0,109,516,1,0,0,0,111,518,1,0,0,0,113,520,1,0,0,0,115,525,1,0,0,0,
  	117,531,1,0,0,0,119,535,1,0,0,0,121,542,1,0,0,0,123,549,1,0,0,0,125,560,
  	1,0,0,0,127,572,1,0,0,0,129,584,1,0,0,0,131,599,1,0,0,0,133,612,1,0,0,
  	0,135,617,1,0,0,0,137,620,1,0,0,0,139,624,1,0,0,0,141,628,1,0,0,0,143,
  	633,1,0,0,0,145,641,1,0,0,0,147,663,1,0,0,0,149,665,1,0,0,0,151,676,1,
  	0,0,0,153,685,1,0,0,0,155,689,1,0,0,0,157,691,1,0,0,0,159,694,1,0,0,0,
  	161,697,1,0,0,0,163,164,5,58,0,0,164,165,5,58,0,0,165,2,1,0,0,0,166,167,
  	5,44,0,0,167,4,1,0,0,0,168,169,5,83,0,0,169,170,5,97,0,0,170,171,5,109,
  	0,0,171,172,5,112,0,0,172,173,5,108,0,0,173,174,5,101,0,0,174,175,5,114,
  	0,0,175,6,1,0,0,0,176,177,5,100,0,0,177,178,5,101,0,0,178,179,5,102,0,
  	0,179,180,5,105,0,0,180,181,5,110,0,0,181,182,5,101,0,0,182,8,1,0,0,0,
  	183,184,5,114,0,0,184,185,5,116,0,0,185,186,5,118,0,0,186,10,1,0,0,0,
  	187,188,5,98,0,0,188,189,5,108,0,0,189,190,5,101,0,0,190,191,5,110,0,
  	0,191,192,5,100,0,0,192,12,1,0,0,0,193,194,5,58,0,0,194,14,1,0,0,0,195,
  	196,5,99,0,0,196,197,5,111,0,0,197,198,5,109,0,0,198,199,5,112,0,0,199,
  	200,5,117,0,0,200,201,5,116,0,0,201,202,5,101,0,0,202,16,1,0,0,0,203,
  	204,5,118,0,0,204,205,5,101,0,0,205,206,5,114,0,0,206,207,5,116,0,0,207,
  	208,5,101,0,0,208,209,5,120,0,0,209,18,1,0,0,0,210,211,5,112,0,0,211,
  	212,5,105,0,0,212,213,5,120,0,0,213,214,5,101,0,0,214,215,5,108,0,0,215,
  	20,1,0,0,0,216,217,5,100,0,0,217,218,5,111,0,0,218,219,5,109,0,0,219,
  	220,5,97,0,0,220,221,5,105,0,0,221,222,5,110,0,0,222,22,1,0,0,0,223,224,
  	5,104,0,0,224,225,5,117,0,0,225,226,5,108,0,0,226,227,5,108,0,0,227,24,
  	1,0,0,0,228,229,5,103,0,0,229,230,5,101,0,0,230,231,5,111,0,0,231,232,
  	5,109,0,0,232,233,5,101,0,0,233,234,5,116,0,0,234,235,5,114,0,0,235,236,
  	5,121,0,0,236,26,1,0,0,0,237,238,5,109,0,0,238,239,5,105,0,0,239,240,
  	5,115,0,0,240,241,5,115,0,0,241,28,1,0,0,0,242,243,5,99,0,0,243,244,5,
  	108,0,0,244,245,5,111,0,0,245,246,5,115,0,0,246,247,5,101,0,0,247,248,
  	5,115,0,0,248,249,5,116,0,0,249,250,5,95,0,0,250,251,5,104,0,0,251,252,
  	5,105,0,0,252,253,5,116,0,0,253,30,1,0,0,0,254,255,5,114,0,0,255,256,
  	5,97,0,0,256,257,5,121,0,0,257,258,5,103,0,0,258,259,5,101,0,0,259,260,
  	5,110,0,0,260,32,1,0,0,0,261,262,5,97,0,0,262,263,5,109,0,0,263,264,5,
  	112,0,0,264,265,5,108,0,0,265,266,5,105,0,0,266,267,5,102,0,0,267,268,
  	5,105,0,0,268,269,5,99,0,0,269,270,5,97,0,0,270,271,5,116,0,0,271,272,
  	5,105,0,0,272,273,5,111,0,0,273,274,5,110,0,0,274,34,1,0,0,0,275,276,
  	5,109,0,0,276,277,5,101,0,0,277,278,5,115,0,0,278,279,5,104,0,0,279,36,
  	1,0,0,0,280,281,5,100,0,0,281,282,5,115,0,0,282,38,1,0,0,0,283,284,5,
  	99,0,0,284,285,5,117,0,0,285,286,5,108,0,0,286,287,5,108,0,0,287,40,1,
  	0,0,0,288,289,5,100,0,0,289,290,5,101,0,0,290,291,5,112,0,0,291,292,5,
  	116,0,0,292,293,5,104,0,0,293,294,5,95,0,0,294,295,5,102,0,0,295,296,
  	5,117,0,0,296,297,5,110,0,0,297,298,5,99,0,0,298,42,1,0,0,0,299,300,5,
  	100,0,0,300,301,5,101,0,0,301,302,5,112,0,0,302,303,5,116,0,0,303,304,
  	5,104,0,0,304,305,5,95,0,0,305,306,5,119,0,0,306,307,5,114,0,0,307,308,
  	5,105,0,0,308,309,5,116,0,0,309,310,5,101,0,0,310,44,1,0,0,0,311,312,
  	5,99,0,0,312,313,5,111,0,0,313,314,5,110,0,0,314,315,5,115,0,0,315,316,
  	5,101,0,0,316,317,5,114,0,0,317,318,5,118,0,0,318,319,5,97,0,0,319,320,
  	5,116,0,0,320,321,5,105,0,0,321,322,5,118,0,0,322,323,5,101,0,0,323,46,
  	1,0,0,0,324,325,5,101,0,0,325,326,5,110,0,0,326,327,5,97,0,0,327,328,
  	5,98,0,0,328,329,5,108,0,0,329,330,5,101,0,0,330,331,5,95,0,0,331,332,
  	5,100,0,0,332,333,5,101,0,0,333,334,5,112,0,0,334,335,5,116,0,0,335,336,
  	5,104,0,0,336,48,1,0,0,0,337,338,5,116,0,0,338,339,5,111,0,0,339,340,
  	5,112,0,0,340,341,5,111,0,0,341,342,5,108,0,0,342,343,5,111,0,0,343,344,
  	5,103,0,0,344,345,5,121,0,0,345,50,1,0,0,0,346,347,5,101,0,0,347,348,
  	5,110,0,0,348,349,5,97,0,0,349,350,5,98,0,0,350,351,5,108,0,0,351,352,
  	5,101,0,0,352,353,5,95,0,0,353,354,5,115,0,0,354,355,5,116,0,0,355,356,
  	5,101,0,0,356,357,5,110,0,0,357,358,5,99,0,0,358,359,5,105,0,0,359,360,
  	5,108,0,0,360,52,1,0,0,0,361,362,5,115,0,0,362,363,5,116,0,0,363,364,
  	5,101,0,0,364,365,5,110,0,0,365,366,5,99,0,0,366,367,5,105,0,0,367,368,
  	5,108,0,0,368,369,5,95,0,0,369,370,5,102,0,0,370,371,5,117,0,0,371,372,
  	5,110,0,0,372,373,5,99,0,0,373,54,1,0,0,0,374,375,5,115,0,0,375,376,5,
  	116,0,0,376,377,5,101,0,0,377,378,5,110,0,0,378,379,5,99,0,0,379,380,
  	5,105,0,0,380,381,5,108,0,0,381,382,5,95,0,0,382,383,5,112,0,0,383,384,
  	5,97,0,0,384,385,5,115,0,0,385,386,5,115,0,0,386,387,5,95,0,0,387,388,
  	5,111,0,0,388,389,5,112,0,0,389,56,1,0,0,0,390,391,5,115,0,0,391,392,
  	5,116,0,0,392,393,5,101,0,0,393,394,5,110,0,0,394,395,5,99,0,0,395,396,
  	5,105,0,0,396,397,5,108,0,0,397,398,5,95,0,0,398,399,5,114,0,0,399,400,
  	5,101,0,0,400,401,5,97,0,0,401,402,5,100,0,0,402,403,5,95,0,0,403,404,
  	5,109,0,0,404,405,5,97,0,0,405,406,5,115,0,0,406,407,5,107,0,0,407,58,
  	1,0,0,0,408,409,5,115,0,0,409,410,5,116,0,0,410,411,5,101,0,0,411,412,
  	5,110,0,0,412,413,5,99,0,0,413,414,5,105,0,0,414,415,5,108,0,0,415,416,
  	5,95,0,0,416,417,5,119,0,0,417,418,5,114,0,0,418,419,5,105,0,0,419,420,
  	5,116,0,0,420,421,5,101,0,0,421,422,5,95,0,0,422,423,5,109,0,0,423,424,
  	5,97,0,0,424,425,5,115,0,0,425,426,5,107,0,0,426,60,1,0,0,0,427,428,5,
  	114,0,0,428,429,5,101,0,0,429,430,5,99,0,0,430,431,5,117,0,0,431,432,
  	5,114,0,0,432,433,5,115,0,0,433,434,5,105,0,0,434,435,5,111,0,0,435,436,
  	5,110,0,0,436,437,5,95,0,0,437,438,5,100,0,0,438,439,5,101,0,0,439,440,
  	5,112,0,0,440,441,5,116,0,0,441,442,5,104,0,0,442,62,1,0,0,0,443,444,
  	5,112,0,0,444,445,5,97,0,0,445,446,5,121,0,0,446,447,5,108,0,0,447,448,
  	5,111,0,0,448,449,5,97,0,0,449,450,5,100,0,0,450,64,1,0,0,0,451,452,5,
  	112,0,0,452,453,5,101,0,0,453,454,5,114,0,0,454,455,5,95,0,0,455,456,
  	5,109,0,0,456,457,5,97,0,0,457,458,5,116,0,0,458,459,5,101,0,0,459,460,
  	5,114,0,0,460,461,5,105,0,0,461,462,5,97,0,0,462,463,5,108,0,0,463,66,
  	1,0,0,0,464,465,5,108,0,0,465,466,5,111,0,0,466,467,5,99,0,0,467,468,
  	5,97,0,0,468,469,5,108,0,0,469,68,1,0,0,0,470,471,5,124,0,0,471,472,5,
  	124,0,0,472,70,1,0,0,0,473,474,5,38,0,0,474,475,5,38,0,0,475,72,1,0,0,
  	0,476,477,5,61,0,0,477,478,5,61,0,0,478,74,1,0,0,0,479,480,5,33,0,0,480,
  	481,5,61,0,0,481,76,1,0,0,0,482,483,5,62,0,0,483,78,1,0,0,0,484,485,5,
  	60,0,0,485,80,1,0,0,0,486,487,5,62,0,0,487,488,5,61,0,0,488,82,1,0,0,
  	0,489,490,5,60,0,0,490,491,5,61,0,0,491,84,1,0,0,0,492,493,5,43,0,0,493,
  	86,1,0,0,0,494,495,5,45,0,0,495,88,1,0,0,0,496,497,5,47,0,0,497,90,1,
  	0,0,0,498,499,5,37,0,0,499,92,1,0,0,0,500,501,5,94,0,0,501,94,1,0,0,0,
  	502,503,5,33,0,0,503,96,1,0,0,0,504,505,5,59,0,0,505,98,1,0,0,0,506,507,
  	5,61,0,0,507,100,1,0,0,0,508,509,5,40,0,0,509,102,1,0,0,0,510,511,5,41,
  	0,0,511,104,1,0,0,0,512,513,5,123,0,0,513,106,1,0,0,0,514,515,5,125,0,
  	0,515,108,1,0,0,0,516,517,5,91,0,0,517,110,1,0,0,0,518,519,5,93,0,0,519,
  	112,1,0,0,0,520,521,5,116,0,0,521,522,5,114,0,0,522,523,5,117,0,0,523,
  	524,5,101,0,0,524,114,1,0,0,0,525,526,5,102,0,0,526,527,5,97,0,0,527,
  	528,5,108,0,0,528,529,5,115,0,0,529,530,5,101,0,0,530,116,1,0,0,0,531,
  	532,5,108,0,0,532,533,5,111,0,0,533,534,5,103,0,0,534,118,1,0,0,0,535,
  	536,5,108,0,0,536,537,5,97,0,0,537,538,5,121,0,0,538,539,5,111,0,0,539,
  	540,5,117,0,0,540,541,5,116,0,0,541,120,1,0,0,0,542,543,5,115,0,0,543,
  	544,5,116,0,0,544,545,5,114,0,0,545,546,5,117,0,0,546,547,5,99,0,0,547,
  	548,5,116,0,0,548,122,1,0,0,0,549,550,5,67,0,0,550,551,5,111,0,0,551,
  	552,5,109,0,0,552,553,5,112,0,0,553,554,5,117,0,0,554,555,5,116,0,0,555,
  	556,5,101,0,0,556,557,5,80,0,0,557,558,5,83,0,0,558,559,5,79,0,0,559,
  	124,1,0,0,0,560,561,5,71,0,0,561,562,5,114,0,0,562,563,5,97,0,0,563,564,
  	5,112,0,0,564,565,5,104,0,0,565,566,5,105,0,0,566,567,5,99,0,0,567,568,
  	5,115,0,0,568,569,5,80,0,0,569,570,5,83,0,0,570,571,5,79,0,0,571,126,
  	1,0,0,0,572,573,5,82,0,0,573,574,5,97,0,0,574,575,5,121,0,0,575,576,5,
  	116,0,0,576,577,5,114,0,0,577,578,5,97,0,0,578,579,5,99,0,0,579,580,5,
  	101,0,0,580,581,5,80,0,0,581,582,5,83,0,0,582,583,5,79,0,0,583,128,1,
  	0,0,0,584,585,5,82,0,0,585,586,5,97,0,0,586,587,5,121,0,0,587,588,5,116,
  	0,0,588,589,5,114,0,0,589,590,5,97,0,0,590,591,5,99,0,0,591,592,5,101,
  	0,0,592,593,5,82,0,0,593,594,5,97,0,0,594,595,5,121,0,0,595,596,5,103,
  	0,0,596,597,5,101,0,0,597,598,5,110,0,0,598,130,1,0,0,0,599,600,5,82,
  	0,0,600,601,5,97,0,0,601,602,5,121,0,0,602,603,5,116,0,0,603,604,5,114,
  	0,0,604,605,5,97,0,0,605,606,5,99,0,0,606,607,5,101,0,0,607,608,5,80,
  	0,0,608,609,5,97,0,0,609,610,5,115,0,0,610,611,5,115,0,0,611,132,1,0,
  	0,0,612,613,5,115,0,0,613,614,5,108,0,0,614,615,5,111,0,0,615,616,5,116,
  	0,0,616,134,1,0,0,0,617,618,5,114,0,0,618,619,5,116,0,0,619,136,1,0,0,
  	0,620,621,5,82,0,0,621,622,5,84,0,0,622,623,5,86,0,0,623,138,1,0,0,0,
  	624,625,5,68,0,0,625,626,5,83,0,0,626,627,5,86,0,0,627,140,1,0,0,0,628,
  	629,5,114,0,0,629,630,5,111,0,0,630,631,5,111,0,0,631,632,5,116,0,0,632,
  	142,1,0,0,0,633,637,7,0,0,0,634,636,7,1,0,0,635,634,1,0,0,0,636,639,1,
  	0,0,0,637,635,1,0,0,0,637,638,1,0,0,0,638,144,1,0,0,0,639,637,1,0,0,0,
  	640,642,7,2,0,0,641,640,1,0,0,0,642,643,1,0,0,0,643,641,1,0,0,0,643,644,
  	1,0,0,0,644,146,1,0,0,0,645,647,7,2,0,0,646,645,1,0,0,0,647,648,1,0,0,
  	0,648,646,1,0,0,0,648,649,1,0,0,0,649,650,1,0,0,0,650,654,5,46,0,0,651,
  	653,7,2,0,0,652,651,1,0,0,0,653,656,1,0,0,0,654,652,1,0,0,0,654,655,1,
  	0,0,0,655,664,1,0,0,0,656,654,1,0,0,0,657,659,5,46,0,0,658,660,7,2,0,
  	0,659,658,1,0,0,0,660,661,1,0,0,0,661,659,1,0,0,0,661,662,1,0,0,0,662,
  	664,1,0,0,0,663,646,1,0,0,0,663,657,1,0,0,0,664,148,1,0,0,0,665,671,5,
  	34,0,0,666,670,8,3,0,0,667,668,5,34,0,0,668,670,5,34,0,0,669,666,1,0,
  	0,0,669,667,1,0,0,0,670,673,1,0,0,0,671,669,1,0,0,0,671,672,1,0,0,0,672,
  	674,1,0,0,0,673,671,1,0,0,0,674,675,5,34,0,0,675,150,1,0,0,0,676,680,
  	5,35,0,0,677,679,8,4,0,0,678,677,1,0,0,0,679,682,1,0,0,0,680,678,1,0,
  	0,0,680,681,1,0,0,0,681,683,1,0,0,0,682,680,1,0,0,0,683,684,6,75,0,0,
  	684,152,1,0,0,0,685,686,7,5,0,0,686,687,1,0,0,0,687,688,6,76,0,0,688,
  	154,1,0,0,0,689,690,5,42,0,0,690,156,1,0,0,0,691,692,5,37,0,0,692,693,
  	5,123,0,0,693,158,1,0,0,0,694,695,5,125,0,0,695,696,5,37,0,0,696,160,
  	1,0,0,0,697,701,3,157,78,0,698,700,9,0,0,0,699,698,1,0,0,0,700,703,1,
  	0,0,0,701,702,1,0,0,0,701,699,1,0,0,0,702,704,1,0,0,0,703,701,1,0,0,0,
  	704,705,3,159,79,0,705,162,1,0,0,0,11,0,637,643,648,654,661,663,669,671,
  	680,701,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  siglexerLexerStaticData = staticData.release();
}

}

SIGLexer::SIGLexer(CharStream *input) : Lexer(input) {
  SIGLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *siglexerLexerStaticData->atn, siglexerLexerStaticData->decisionToDFA, siglexerLexerStaticData->sharedContextCache);
}

SIGLexer::~SIGLexer() {
  delete _interpreter;
}

std::string SIGLexer::getGrammarFileName() const {
  return "SIG.g4";
}

const std::vector<std::string>& SIGLexer::getRuleNames() const {
  return siglexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& SIGLexer::getChannelNames() const {
  return siglexerLexerStaticData->channelNames;
}

const std::vector<std::string>& SIGLexer::getModeNames() const {
  return siglexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& SIGLexer::getVocabulary() const {
  return siglexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView SIGLexer::getSerializedATN() const {
  return siglexerLexerStaticData->serializedATN;
}

const atn::ATN& SIGLexer::getATN() const {
  return *siglexerLexerStaticData->atn;
}




void SIGLexer::initialize() {
  ::antlr4::internal::call_once(siglexerLexerOnceFlag, siglexerLexerInitialize);
}
